//! From https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption

use std::str::FromStr;

use rsacracker::{integer_to_string, run_attacks, KeyEntry, Parameters};
use rug::Integer;

#[test]
fn crypton_intro_challenge_0() {
    // From Crypton/RSA-encryption/Intro-Challenges/Challenge-0
    let p  = Integer::from_str("6958271393287170117448891021448827870244652620796166337874899406278127643022124226656230972235829204217718701711355755622520840943962368410353060326959627").unwrap();
    let q  = Integer::from_str("10816988558466468069802205154113557859050665172995721741674476865844313409030354507360669179381457836401919224815040955096510785560864262908230559354811907").unwrap();

    let params = Parameters {
        p : Some(p.clone()),
        q : Some(q.clone()),
        c : Some(Integer::from_str("61755320155925494660551920761454463487401548279688672761033639271968447552538039977698223026933796912494116347243805242200612025326482838810791756260085509550131713662597497521153195111273693512858774027842245708759910171933236029123361890400870896212504017945900641684931685449796719984403627813045065427962").unwrap()),
        ..Default::default()
    };

    let solution = run_attacks(&params).unwrap();
    let pk = solution.pk.unwrap();

    assert_eq!(pk.p(), p);
    assert_eq!(pk.q(), q);
    assert_eq!(
        integer_to_string(&solution.m.unwrap()).unwrap().trim(),
        "crypton{w0w_n1ce_w4y_t0_beg1n}"
    );
}

#[test]
fn crypton_intro_challenge_1() {
    // From Crypton/RSA-encryption/Intro-Challenges/Challenge-1
    let params = Parameters {
        n : Some(Integer::from_str("97327465444798587278055948925526845496009505279537394552285739021722293489201558751886782168432091942363160534355604762279998727630923810091914577017524593073642676827447173895227246888600059180358809402075042576891370242394248767130395066592747932602851717995806723009815226684448970582305350597344040878031").unwrap()),
        d : Some(Integer::from_str("16674440118012703327250441651827447414883115267385535896258056940902053974041459048570804128769329208368609586641816535253060495809085135720463507190636829663140409668935975403245910582943233005928361736126168922017946174180692640447247905659211062068260330460434066199355148719556676953323140496520670298081").unwrap()),
        c : Some(Integer::from_str("11125884465708489731581304134690776588644730731278417344713534228735000741876873251722696342938899413835601310575884272968841460152603009695093150660214965871603082209160246559886224130726929809349833557186420085096118859072493907293949934200397400262851659109358865549382641323227395564900983973668694710832").unwrap()),
        ..Default::default()
    };

    let solution = run_attacks(&params).unwrap();

    assert!(solution.pk.is_some());
    assert_eq!(
        integer_to_string(&solution.m.unwrap()).unwrap().trim(),
        "crypton{heyy!y0u-g0t_m3!L0ng_w4y_70_g0}"
    );
}

#[test]
fn crypton_intro_challenge_2() {
    // From Crypton/RSA-encryption/Intro-Challenges/Challenge-2
    let params = Parameters::from_public_key(
        b"-----BEGIN PUBLIC KEY-----
MIGcMA0GCSqGSIb3DQEBAQUAA4GKADCBhgKBgHzwnQdNCkQOtxBLcHAiGeOsH/fM
aOISdozS7cu4uBLziemxiVvz6usF1y7X5c3UD8pYp08z6dTeBrMfDbE5w5SVvx8y
4dJ+wrzdDciOInUvtguPli/IS2de6DIWpiOQShTX/auK604oE2If9s6e4XqZQQMw
caqlsRPzNDC+9+m3AgED
-----END PUBLIC KEY-----",
    )
    .unwrap() + Parameters {
        c : Some(Integer::from_str("2029613660163843396903464782115528008655183225445848001281643028687992002927755695965369902157711827410470381085949600499524270486328046449551598001242088232771076726041029619343560895809087267563848414489258883125846714056071432180906074031501935662926108057389184049920101").unwrap()),
        ..Default::default()
    };

    let solution = run_attacks(&params).unwrap();

    assert!(solution.pk.is_none());
    assert_eq!(
        integer_to_string(&solution.m.unwrap()).unwrap().trim(),
        "crypton{4nd_7ha7's_why_p4dd1ng_is-req}"
    );
}

#[test]
#[ignore = "Test times out - requires optimization of common_factor attack with non-coprime exponents"]
fn crypton_intro_challenge_3() {
    // From Crypton/RSA-encryption/Intro-Challenges/Challenge-3
    // This is a common factor attack where multiple moduli share a common prime

    let n1 = Integer::from_str("143786356117385195355522728814418684024129402954309769186869633376407480449846714776247533950484109173163811708549269029920405450237443197994941951104068001708682945191370596050916441792714228818475059839352105948003874426539429621408867171203559281132589926504992702401428910240117807627890055235377744541913").unwrap();
    let e1 = Integer::from(114194);
    let c1 = Integer::from_str_radix("31c2fbff33dec7b070cf737c57393c8ab9982ae51b87b64d001a00aa74264254159e81e13b82ac5bc4d7f38aead06fabbf5b21ee668700a44673fac75bc09b084e79513ada3d11b248ae5fca74ba0c2f807e73052f3090ee61a3bd226e14f4b0544f952449623b8cbd01cc42ff5462c4904d0c28af6dbce73596de45279461fd", 16).unwrap();

    let n2 = Integer::from_str("73988726804584255779346831019194873108586184186524793132656027600961771331094234332693404730437468912329694216269372797532334390363774803642809945268154324370355113538927414351037561899998734391507272602074924837440885467211134022878597523920836541794820777951492188067045604789153534513271406458984968338509").unwrap();
    let e2 = Integer::from(130478);
    let c2 = Integer::from_str_radix("06c12db6573d6f6e1b2ecdaff825c6369da39fa7568f63cb6943070af8a3643e603493e23917833261f9c247d504455f3ef0e637d5f18ad2eeb5293ec0bb622bb171802a8d994b27a274c7dc417e247672b27bffb3dba25ea8dabb7379a58dd41704b605baf123046a88b4c5d5c238a6fae10007c28e482f84568c20f39d8bd7", 16).unwrap();

    let n3 = Integer::from_str("95666403279611361071535593067846981517930129087906362381453835849857496766736720885263927273295086034390557353492037703154353541274448884795437287235560639118986397838850340017834752502157881329960725771502503917735194236743345777337851076649842634506339513864285786698870866229339372558162315435127197444193").unwrap();
    let e3 = Integer::from(122694);
    let c3 = Integer::from_str_radix("5ec536c327efe1a8432e4d36b76227ccebb15d73a102689ba24f7aadbd99298b17a63ee0396c4c489201e10e224f493364b8d999258ad507039520dfddca559c4c26eddc331fc3cf3dda65695aa5c8316423b57f35f641a7154771cd6735f1e8e6b1b212542bc6c21f5323e127447e07ef2cd5584f6a41eeef6b6e1c652b385e", 16).unwrap();

    let n4 = Integer::from_str("119235191922699211973494433973985286182951917872084464216722572875998345005104112625024274855529546680909781406076412741844254205002739352725207590519921992295941563460138887173402493503653397592300336588721082590464192875253265214253650991510709511154297580284525736720396804660126786258245028204861220690641").unwrap();
    let e4 = Integer::from(79874);
    let c4 = Integer::from_str_radix("6488452ed101d5261f29924c5f5a6d3c5ecde3ea7e7ed235aa9c5f62b95dcadaaf2918a9085477d01536478fa747e2ab953b5ae4b56d1e8c074748e98db8fe2672c99720dcd0c968e31ceab02a532715c7f11b8c25384c406202b654d9ccaedcc0a2b017cee63285ae7d22a0c8a0da527e175b1dd042031eb6f9c1ef7dfd5e04", 16).unwrap();

    let params = Parameters {
        n: Some(n1),
        e: e1,
        c: Some(c1),
        keys: vec![
            KeyEntry {
                n: Some(n2),
                e: e2,
                c: Some(c2),
            },
            KeyEntry {
                n: Some(n3),
                e: e3,
                c: Some(c3),
            },
            KeyEntry {
                n: Some(n4),
                e: e4,
                c: Some(c4),
            },
        ],
        ..Default::default()
    };

    let solution = run_attacks(&params).unwrap();

    assert!(solution.pk.is_some() || solution.m.is_some());

    if let Some(m) = solution.m {
        let plaintext = integer_to_string(&m).unwrap();
        assert!(plaintext.contains("crypton"));
    }
}

#[test]
fn crypton_intro_challenge_4() {
    // From Crypton/RSA-encryption/Intro-Challenges/Challenge-4
    let params = Parameters::from_public_key(
        b"-----BEGIN PUBLIC KEY-----
MIGeMA0GCSqGSIb3DQEBAQUAA4GMADCBiAKBgFLzG+bNJlCs6BLFAQbEX4SWxDPJ
xTJb+bLVGkdSX/EfroClr/+QHJD0H6O7G01s5wqQptC++ddkjF4Ha0vFRoVXywxu
H2toAaJfU7nTlEpvGz6Yq954lexUnmYHKla2SUMJfIJ0Ap4zP4GM+6a7fxMvthDZ
Y33dDzS9A+Ev+T8PAgMBAAE=
-----END PUBLIC KEY-----",
    )
    .unwrap() + Parameters {
        c : Some(Integer::from_str("34556241321778409829234252125398866442939962978969873136382201333200206297769416951162831936418949110944528236841238586744303476629927641535254876274091175076941922589651878305163739775003504738994366530124198403734813628243872035689617702431533182356107612904165873395653564321632211827028395012552136557561").unwrap()),
        ..Default::default()
    };

    let solution = run_attacks(&params).unwrap();

    assert!(solution.pk.is_some());
    assert_eq!(
        integer_to_string(&solution.m.unwrap()).unwrap().trim(),
        "crypton{tw1n_primes_ar3_n07_s3cur3_g00d_job}"
    );
}

#[test]
fn crypton_intro_dp_dq() {
    // From Crypton/RSA-encryption/Intro-Challenges/Dp&Dq
    let params = Parameters::from_public_key(
        b"-----BEGIN PUBLIC KEY-----
MIGeMA0GCSqGSIb3DQEBAQUAA4GMADCBiAKBgHBsoNasn+Gcy1HsQRM56yO+koGG
aZ38qdxWxFDBHwWsMepvjJOaTr2eze6RSn7WnM4G4wXFlDe5HMXOjdBamO6IXBER
THjXoe5ApHPHO2A13mY8b5gt6MYfe236VV/as0s1T+uqRZjfGx7F7mIgzfrPtzw3
GMhjlTbZFA19S3s9AgMBAAE=
-----END PUBLIC KEY-----",
    )
    .unwrap() + Parameters {
        dp : Some(Integer::from_str("8321799485573394942860161613115645956831906109530714384373208626667653915259713390904176783594390723717464276624389144661507957436413671900779232689662021").unwrap()),
        dq : Some(Integer::from_str("2198929330929270024294269318575741752298983645094723246081092280962552792055470240383972603201186261174772783400859274241718426034485142439904994069255041").unwrap()),
        c : Some(Integer::from_str("17566571384507986501920684476717643642899485510551410879168936492374201653607955250665810863566303340688014776686488868403485605523871915274089823762798181037806899319266076996820598530280948331321436076216629943231750100006966141766214017080534100404680828037122062726674621768210018090430624234789770819047").unwrap()),
        ..Default::default()
    };

    let solution = run_attacks(&params).unwrap();

    assert!(solution.pk.is_some());
    assert_eq!(
        integer_to_string(&solution.m.unwrap()).unwrap().trim(),
        "crypton{so_y0u_finally_got_7he_answer}"
    );
}

#[test]
fn crypton_intro_c4_reloaded() {
    // From Crypton/RSA-encryption/Intro-Challenges/C4-reloaded
    let params = Parameters::from_public_key(
        b"-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCDeOyxb9W4/uMYhwPwA0RoI4Fo
7Nv80buJzIS34i0ShS3YfwTSuJ6nH7hpLj3+5nVK10ru7rFMLiNYh6/1yvVpsxb4
sWodZlOoEQghGSj7JoS5b5ZDQSACePzla9rUUcqgkvKT0ST+KGQ7nVrqKzj0/H+0
/b3UGhxEDpwYOTKyIwIDAQAB
-----END PUBLIC KEY-----",
    )
    .unwrap() + Parameters {
        c : Some(Integer::from_str("11819763760174675920153021341771288445751610736225665976688450992100237983194011932490153803297679056014514165165798223822806239112652952109863115218051408302181087883579154006456923897059107245269179841770968359586583513500289403994652166790846453360339393308711792652027720563674094470343191132951381581713").unwrap()),
        ..Default::default()
    };

    let solution = run_attacks(&params).unwrap();

    assert!(solution.pk.is_some());
    assert_eq!(
        integer_to_string(&solution.m.unwrap()).unwrap().trim(),
        "You are doing great, take your flag: crypton{e7_7u_bru7e_f0rc3!}"
    );
}

#[test]
fn crypton_intro_7h3_godf4ther() {
    // From Crypton/RSA-encryption/Intro-Challenges/7h3_Godf4ther
    let params = Parameters {
        n : Some(Integer::from_str("551504906448961847141690415172108060028728303241409233555695098354559944134593608349928135804830998592132110248539199471080424828431558863560289446722435352638365009233192053427739540819371609958014315243749107802424381558044339319969305152016580632977089138029197496120537936093909331580951370236220987003013").unwrap()),
        dp : Some(Integer::from_str("11830038111134559585647595089660079959437934096133759102294626765549623265660232459679672150751523484215314838435592395437758168739238085557609083462380613").unwrap()),
        c : Some(Integer::from_str("107468440711479564233059705707903543462715603861148351198033161851531985804686283828124644371684810736457043704288078494499027021060404383615599898485906936595499886668719835207372033635369829485514865104197504722627656264167546000859289130930955562937267989052224012557853382207108448296545841571778808151593").unwrap()),
        ..Default::default()
    };

    let solution = run_attacks(&params).unwrap();

    assert!(solution.pk.is_some());
    assert_eq!(
        integer_to_string(&solution.m.unwrap()).unwrap().trim(),
        "crypton{OMG!Superb_job!_welldone!}"
    );
}
