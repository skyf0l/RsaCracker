# Common Modulus Attack Example
# Same modulus n with different coprime exponents
# Message: "Hello from RsaCracker!"

# Main encryption (e=65537)
n = 166270918338126577330758828592535648964989469159127542778196697837221437733066780089912708466193803018826184715618764250423068066614662326811797974314176667
e = 65537
c = 101426166563031340081848892430088682963208456103191747842250320998988152429677788728002863000545888404939922780658928274441625933818380013385705520687004529

# Second encryption of same message (e=65539)
# Using same n but different coprime exponent
n1 = 166270918338126577330758828592535648964989469159127542778196697837221437733066780089912708466193803018826184715618764250423068066614662326811797974314176667
e1 = 65539
c1 = 3010658584038203090426439964497293786289009321805066712180255388228386327886136527498502555077644981015210395651671683447577001486123394640214855221259770

# Run with:
# rsacracker --raw examples/common_modulus.txt
#
# Expected output:
# Succeeded with attack: common_modulus
# Unciphered data: "Hello from RsaCracker!"
#
# This works because with coprime exponents e1 and e2, we can use
# the Extended Euclidean Algorithm to find x,y such that x*e1 + y*e2 = 1
# Then m = c1^x * c2^y mod n
