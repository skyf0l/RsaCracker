name: CI

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]
  workflow_call: {}

env:
  RUST_BACKTRACE: 1
  NO_FACTORDB: 1

jobs:
  fmt:
    name: Format
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v5
      - name: Stable toolchain with rustfmt
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - uses: swatinem/rust-cache@v2

      - name: Check coding style
        run: cargo fmt --check --all

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v5
      - name: Stable toolchain with clippy
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: swatinem/rust-cache@v2

      - name: Lint
        run: cargo clippy --all-targets  --all-features -- -D warnings

  docs:
    name: Docs
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      RUSTDOCFLAGS: "-Dwarnings"

    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - uses: swatinem/rust-cache@v2

      - run: cargo doc --no-deps

  tests:
    name: Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - uses: swatinem/rust-cache@v2
      - uses: taiki-e/install-action@cargo-nextest

      - name: Test
        run: cargo nextest run --all-features --lib --bins --test keys

  key-generation:
    name: Verify deterministic key generation
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - uses: swatinem/rust-cache@v2

      - name: Generate keys to temporary directory
        run: |
          cd tools/gen_keys
          cargo run --quiet -- /tmp/keys_generated

      - name: Verify keys match committed keys
        run: |
          failed=0
          # Check all files in generated directory
          for file in /tmp/keys_generated/*; do
            [ -f "$file" ] || continue
            filename=$(basename "$file")
            
            # Skip files with non-deterministic encryption (random salts)
            if [[ "$filename" == "pkcs12.p12" ]] || \
               [[ "$filename" == "private_openssl_passphrase.pem" ]] || \
               [[ "$filename" == "private_rsa_passphrase.pem" ]]; then
              echo "⚠️  Skipping $filename (contains random salt)"
              continue
            fi
            
            # Compare raw files byte-for-byte
            if [ -f "tests/keys/$filename" ]; then
              if diff -q "$file" "tests/keys/$filename" > /dev/null 2>&1; then
                echo "✓ $filename matches committed version"
              else
                echo "✗ $filename differs from committed version"
                failed=1
              fi
            else
              echo "⚠️  $filename not found in committed keys"
            fi
          done

          if [ $failed -eq 1 ]; then
            echo "Error: Generated keys don't match committed keys"
            exit 1
          fi

          echo "✓ All deterministic keys match committed versions"

  ctf-challenges:
    name: CTF challenges
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - uses: swatinem/rust-cache@v2
      - uses: taiki-e/install-action@cargo-nextest

      - name: Test
        run: cargo nextest run --release --all-features --test "ctf_*"

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@nightly
      - uses: swatinem/rust-cache@v2
      - uses: taiki-e/install-action@cargo-nextest
      - uses: taiki-e/install-action@cargo-llvm-cov

      - name: Tests
        run: cargo llvm-cov nextest --lcov --output-path lcov.info --all-features --lib --bins --test keys

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: lcov.info
          flags: rust
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: Build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        # os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - uses: swatinem/rust-cache@v2

      # msys2 required by rug on windows
      - name: Setup msys2 (windows)
        uses: msys2/setup-msys2@v2
        if: matrix.os == 'windows-latest'
        with:
          install: base-devel pacman-mirrors diffutils m4 make pkgconf openssl openssl-devel
          pacboy: gcc:p rust:p

      # Only for windows
      - name: Msys2 build (windows)
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          cargo build

      - name: Build
        if: matrix.os != 'windows-latest'
        run: cargo build

  docker-build:
    name: Docker build
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      CACHE_VERSION: v1

    steps:
      - uses: actions/checkout@v5

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            /tmp/cache/rsacracker/target
            /tmp/cache/cargo/registry
          key: ${{ runner.os }}-rust-${{ env.CACHE_VERSION }}-${{ github.job }}-${{ hashFiles('**/Cargo.toml', '**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-rust-${{ env.CACHE_VERSION }}-${{ github.job }}-

      - name: Inject cache into docker
        uses: reproducible-containers/buildkit-cache-dance@v3
        with:
          cache-map: |
            {
              "/tmp/cache/rsacracker/target": "/usr/src/rsacracker/target",
              "/tmp/cache/cargo/registry": "/usr/local/cargo/registry"
            }
          skip-extraction: ${{ steps.cache.outputs.cache-hit }}

      - name: Build
        uses: docker/build-push-action@v6
        with:
          tags: rsacracker:test
          outputs: type=docker
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test the Docker image
        run: docker run --rm -v $PWD:/data rsacracker:test -n 323 --attack small_prime --factors
